{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tomlaczik/research/src/components/GlobalExplanations/GlobalExplanation.js\";\nimport React, { Component } from \"react\";\nimport { FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, MarkSeries, XAxis, YAxis } from \"react-vis\";\nimport \"./GlobalExplanation.css\";\nexport class GlobalExplanation extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      feature,\n      data\n    } = props;\n    this.state = {\n      selectedDataPoint: [],\n      dataPoints: data.reduce((previousRows, currentRow) => {\n        const currentX = currentRow[feature];\n        const firstBiggerElementIndex = previousRows.findIndex(previousRow => previousRow.x > currentX);\n        const insertionIndex = firstBiggerElementIndex < 0 ? previousRows.length : firstBiggerElementIndex;\n        return [...previousRows.slice(0, insertionIndex), {\n          x: currentX,\n          y: currentX * Math.random()\n        }, ...previousRows.slice(insertionIndex)];\n      }, [])\n    };\n  }\n\n  render() {\n    const {\n      feature\n    } = this.props;\n    const {\n      dataPoints,\n      selectedDataPoint\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"global-explanation\",\n      children: [feature, /*#__PURE__*/_jsxDEV(FlexibleWidthXYPlot, {\n        height: 200,\n        children: [/*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LineSeries, {\n          color: \"blue\",\n          data: dataPoints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MarkSeries, {\n          color: \"orange\",\n          data: selectedDataPoint\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      selectedRowIndex\n    } = this.props;\n\n    if (prevProps.selectedRowIndex !== selectedRowIndex) {\n      const {\n        feature,\n        data\n      } = this.props;\n      const {\n        dataPoints\n      } = this.state;\n      this.setState({\n        selectedDataPoint: [dataPoints.find(dataPoint => dataPoint.x === data[selectedRowIndex][feature])]\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/tomlaczik/research/src/components/GlobalExplanations/GlobalExplanation.js"],"names":["React","Component","FlexibleWidthXYPlot","HorizontalGridLines","LineSeries","MarkSeries","XAxis","YAxis","GlobalExplanation","constructor","props","feature","data","state","selectedDataPoint","dataPoints","reduce","previousRows","currentRow","currentX","firstBiggerElementIndex","findIndex","previousRow","x","insertionIndex","length","slice","y","Math","random","render","componentDidUpdate","prevProps","selectedRowIndex","setState","find","dataPoint"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,UAHF,EAIEC,UAJF,EAKEC,KALF,EAMEC,KANF,QAOO,WAPP;AASA,OAAO,yBAAP;AAEA,OAAO,MAAMC,iBAAN,SAAgCP,SAAhC,CAA0C;AAC/CQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAoBF,KAA1B;AACA,SAAKG,KAAL,GAAa;AACXC,MAAAA,iBAAiB,EAAE,EADR;AAEXC,MAAAA,UAAU,EAAEH,IAAI,CAACI,MAAL,CAAY,CAACC,YAAD,EAAeC,UAAf,KAA8B;AACpD,cAAMC,QAAQ,GAAGD,UAAU,CAACP,OAAD,CAA3B;AAEA,cAAMS,uBAAuB,GAAGH,YAAY,CAACI,SAAb,CAC7BC,WAAD,IAAiBA,WAAW,CAACC,CAAZ,GAAgBJ,QADH,CAAhC;AAIA,cAAMK,cAAc,GAClBJ,uBAAuB,GAAG,CAA1B,GACIH,YAAY,CAACQ,MADjB,GAEIL,uBAHN;AAKA,eAAO,CACL,GAAGH,YAAY,CAACS,KAAb,CAAmB,CAAnB,EAAsBF,cAAtB,CADE,EAEL;AACED,UAAAA,CAAC,EAAEJ,QADL;AAEEQ,UAAAA,CAAC,EAAER,QAAQ,GAAGS,IAAI,CAACC,MAAL;AAFhB,SAFK,EAML,GAAGZ,YAAY,CAACS,KAAb,CAAmBF,cAAnB,CANE,CAAP;AAQD,OApBW,EAoBT,EApBS;AAFD,KAAb;AAwBD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEnB,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,UAAM;AAAEK,MAAAA,UAAF;AAAcD,MAAAA;AAAd,QAAoC,KAAKD,KAA/C;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,iBACGF,OADH,eAGE,QAAC,mBAAD;AAAqB,QAAA,MAAM,EAAE,GAA7B;AAAA,gCACE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,MAAlB;AAAyB,UAAA,IAAI,EAAEI;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,QAAlB;AAA2B,UAAA,IAAI,EAAED;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAEDiB,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAM;AAAEC,MAAAA;AAAF,QAAuB,KAAKvB,KAAlC;;AACA,QAAIsB,SAAS,CAACC,gBAAV,KAA+BA,gBAAnC,EAAqD;AACnD,YAAM;AAAEtB,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAoB,KAAKF,KAA/B;AACA,YAAM;AAAEK,QAAAA;AAAF,UAAiB,KAAKF,KAA5B;AACA,WAAKqB,QAAL,CAAc;AACZpB,QAAAA,iBAAiB,EAAE,CACjBC,UAAU,CAACoB,IAAX,CACGC,SAAD,IAAeA,SAAS,CAACb,CAAV,KAAgBX,IAAI,CAACqB,gBAAD,CAAJ,CAAuBtB,OAAvB,CADjC,CADiB;AADP,OAAd;AAOD;AACF;;AA9D8C","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  LineSeries,\n  MarkSeries,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\n\nimport \"./GlobalExplanation.css\";\n\nexport class GlobalExplanation extends Component {\n  constructor(props) {\n    super(props);\n\n    const { feature, data } = props;\n    this.state = {\n      selectedDataPoint: [],\n      dataPoints: data.reduce((previousRows, currentRow) => {\n        const currentX = currentRow[feature];\n\n        const firstBiggerElementIndex = previousRows.findIndex(\n          (previousRow) => previousRow.x > currentX\n        );\n\n        const insertionIndex =\n          firstBiggerElementIndex < 0\n            ? previousRows.length\n            : firstBiggerElementIndex;\n\n        return [\n          ...previousRows.slice(0, insertionIndex),\n          {\n            x: currentX,\n            y: currentX * Math.random(),\n          },\n          ...previousRows.slice(insertionIndex),\n        ];\n      }, []),\n    };\n  }\n\n  render() {\n    const { feature } = this.props;\n    const { dataPoints, selectedDataPoint } = this.state;\n    return (\n      <div className=\"global-explanation\">\n        {feature}\n\n        <FlexibleWidthXYPlot height={200}>\n          <HorizontalGridLines />\n          <LineSeries color=\"blue\" data={dataPoints} />\n          <MarkSeries color=\"orange\" data={selectedDataPoint} />\n          <XAxis />\n          <YAxis />\n        </FlexibleWidthXYPlot>\n      </div>\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedRowIndex } = this.props;\n    if (prevProps.selectedRowIndex !== selectedRowIndex) {\n      const { feature, data } = this.props;\n      const { dataPoints } = this.state;\n      this.setState({\n        selectedDataPoint: [\n          dataPoints.find(\n            (dataPoint) => dataPoint.x === data[selectedRowIndex][feature]\n          ),\n        ],\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}