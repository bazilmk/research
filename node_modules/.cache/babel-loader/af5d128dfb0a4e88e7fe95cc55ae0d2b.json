{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tomlaczik/research/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, Treemap, XAxis, YAxis } from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport \"./App.css\";\nimport { Tooltip } from \"./components\";\nconst features = [\"LotArea\", \"YearBuilt\", \"GrLivArea\", \"KitchenAbvGr\", \"FirstFlrSF\", \"PoolArea\", \"TotalBsmtSF\", \"BsmtFinSFOne\", \"BsmtUnfSF\", \"GarageYrBlt\", \"EnclosedPorch\", \"WoodDeckSF\", \"MSSubClass\", \"MiscVal\", \"OpenPorchSF\", \"ThreeSsnPorch\", \"YearRemodAdd\", \"YrSold\", \"GarageArea\", \"LowQualFinSF\", \"BsmtFinSFTwo\", \"OverallCond\", \"MoSold\", \"SecondFlrSF\", \"TotRmsAbvGrd\", \"ScreenPorch\", \"Fireplaces\", \"OverallQual\", \"HalfBath\", \"MasVnrArea\", \"GarageCars\", \"LotFrontage\", \"BsmtFullBath\", \"FullBath\", \"BedroomAbvGr\", \"BsmtHalfBath\"];\nconst tableColumns = [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features];\nconst tableRows = new Array(tableColumns.length).fill(1).map(() => {\n  const row = {};\n  tableColumns.forEach(tableColumn => row[tableColumn] = Math.random() * 1000 - 500);\n  return row;\n});\nconst lineSeriesData = [];\n\nfor (let x = 0; x < 10; x += 0.1) {\n  lineSeriesData.push({\n    x,\n    y: Math.random()\n  });\n}\n\nfunction App() {\n  _s();\n\n  const [selectedRowIndex, setSelectedRowIndex] = useState();\n  const [tooltipData, setTooltipData] = useState();\n  const treeChartData = useMemo(() => {\n    const positiveChildren = [];\n    const negativeChildren = [];\n\n    if (selectedRowIndex !== undefined) {\n      const selectedRow = tableRows[selectedRowIndex];\n      features.forEach(feature => {\n        let children, color;\n        const value = selectedRow[feature];\n\n        if (value < 0) {\n          children = negativeChildren;\n          color = \"#006f3c\";\n        } else {\n          children = positiveChildren;\n          color = \"#bf212f\";\n        }\n\n        children.push({\n          title: feature,\n          size: Math.abs(value),\n          color,\n          value\n        });\n      });\n    }\n\n    return {\n      children: [{\n        title: \"Negative\",\n        children: positiveChildren,\n        color: \"none\"\n      }, {\n        title: \"Positive\",\n        children: negativeChildren,\n        color: \"none\"\n      }]\n    };\n  }, [selectedRowIndex]);\n  const [treeMapDimensions, setTreeMapDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const treeMapContainer = useCallback(treeMapContainerElement => {\n    if (treeMapContainerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = treeMapContainerElement;\n      setTreeMapDimensions({\n        width,\n        height\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"mosaic\",\n      children: features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [feature, /*#__PURE__*/_jsxDEV(FlexibleWidthXYPlot, {\n          height: 200,\n          children: [/*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LineSeries, {\n            color: \"red\",\n            data: lineSeriesData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, `chart-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"main\",\n      ref: treeMapContainer,\n      onMouseLeave: () => setTooltipData(),\n      children: [selectedRowIndex === undefined && \"Select a row in the table below\", /*#__PURE__*/_jsxDEV(Treemap, {\n        title: \"Test\",\n        data: treeChartData,\n        mode: \"squarify\",\n        hideRootNode: true,\n        colorType: \"literal\",\n        onLeafMouseOver: ({\n          data\n        }) => setTooltipData(data),\n        onLeafClick: (...args) => console.log(\"klikk\", [args]),\n        padding: 1,\n        margin: 0,\n        ...treeMapDimensions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        data: tooltipData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: tableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: column\n            }, `feature-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: index === selectedRowIndex ? \"selected\" : \"\",\n            onClick: () => setSelectedRowIndex(index),\n            children: tableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row[column]\n            }, `feature-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 19\n            }, this))\n          }, `row-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ogyVhYGeMtCVq9KqqG/mHRNPbcw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tomlaczik/research/src/App.js"],"names":["React","useCallback","useMemo","useState","FlexibleWidthXYPlot","HorizontalGridLines","LineSeries","Treemap","XAxis","YAxis","Tooltip","features","tableColumns","tableRows","Array","length","fill","map","row","forEach","tableColumn","Math","random","lineSeriesData","x","push","y","App","selectedRowIndex","setSelectedRowIndex","tooltipData","setTooltipData","treeChartData","positiveChildren","negativeChildren","undefined","selectedRow","feature","children","color","value","title","size","abs","treeMapDimensions","setTreeMapDimensions","width","height","treeMapContainer","treeMapContainerElement","clientWidth","clientHeight","index","data","args","console","log","column"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from \"react\";\nimport {\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  LineSeries,\n  Treemap,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\n\nimport \"react-vis/dist/style.css\";\n\nimport \"./App.css\";\nimport { Tooltip } from \"./components\";\n\nconst features = [\n  \"LotArea\",\n  \"YearBuilt\",\n  \"GrLivArea\",\n  \"KitchenAbvGr\",\n  \"FirstFlrSF\",\n  \"PoolArea\",\n  \"TotalBsmtSF\",\n  \"BsmtFinSFOne\",\n  \"BsmtUnfSF\",\n  \"GarageYrBlt\",\n  \"EnclosedPorch\",\n  \"WoodDeckSF\",\n  \"MSSubClass\",\n  \"MiscVal\",\n  \"OpenPorchSF\",\n  \"ThreeSsnPorch\",\n  \"YearRemodAdd\",\n  \"YrSold\",\n  \"GarageArea\",\n  \"LowQualFinSF\",\n  \"BsmtFinSFTwo\",\n  \"OverallCond\",\n  \"MoSold\",\n  \"SecondFlrSF\",\n  \"TotRmsAbvGrd\",\n  \"ScreenPorch\",\n  \"Fireplaces\",\n  \"OverallQual\",\n  \"HalfBath\",\n  \"MasVnrArea\",\n  \"GarageCars\",\n  \"LotFrontage\",\n  \"BsmtFullBath\",\n  \"FullBath\",\n  \"BedroomAbvGr\",\n  \"BsmtHalfBath\",\n];\n\nconst tableColumns = [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features];\n\nconst tableRows = new Array(tableColumns.length).fill(1).map(() => {\n  const row = {};\n  tableColumns.forEach(\n    (tableColumn) => (row[tableColumn] = Math.random() * 1000 - 500)\n  );\n  return row;\n});\n\nconst lineSeriesData = [];\nfor (let x = 0; x < 10; x += 0.1) {\n  lineSeriesData.push({ x, y: Math.random() });\n}\n\nfunction App() {\n  const [selectedRowIndex, setSelectedRowIndex] = useState();\n\n  const [tooltipData, setTooltipData] = useState();\n\n  const treeChartData = useMemo(() => {\n    const positiveChildren = [];\n    const negativeChildren = [];\n\n    if (selectedRowIndex !== undefined) {\n      const selectedRow = tableRows[selectedRowIndex];\n      features.forEach((feature) => {\n        let children, color;\n        const value = selectedRow[feature];\n        if (value < 0) {\n          children = negativeChildren;\n          color = \"#006f3c\";\n        } else {\n          children = positiveChildren;\n          color = \"#bf212f\";\n        }\n        children.push({ title: feature, size: Math.abs(value), color, value });\n      });\n    }\n\n    return {\n      children: [\n        {\n          title: \"Negative\",\n          children: positiveChildren,\n          color: \"none\",\n        },\n        {\n          title: \"Positive\",\n          children: negativeChildren,\n          color: \"none\",\n        },\n      ],\n    };\n  }, [selectedRowIndex]);\n\n  const [treeMapDimensions, setTreeMapDimensions] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  const treeMapContainer = useCallback((treeMapContainerElement) => {\n    if (treeMapContainerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height,\n      } = treeMapContainerElement;\n      setTreeMapDimensions({ width, height });\n    }\n  }, []);\n\n  return (\n    <main>\n      <section id=\"mosaic\">\n        {features.map((feature, index) => (\n          <div key={`chart-${index}`}>\n            {feature}\n\n            <FlexibleWidthXYPlot height={200}>\n              <HorizontalGridLines />\n              <LineSeries color=\"red\" data={lineSeriesData} />\n              <XAxis />\n              <YAxis />\n            </FlexibleWidthXYPlot>\n          </div>\n        ))}\n      </section>\n      <section\n        id=\"main\"\n        ref={treeMapContainer}\n        onMouseLeave={() => setTooltipData()}\n      >\n        {selectedRowIndex === undefined && \"Select a row in the table below\"}\n        <Treemap\n          title={\"Test\"}\n          data={treeChartData}\n          mode=\"squarify\"\n          hideRootNode\n          colorType=\"literal\"\n          onLeafMouseOver={({ data }) => setTooltipData(data)}\n          onLeafClick={(...args) => console.log(\"klikk\", [args])}\n          padding={1}\n          margin={0}\n          {...treeMapDimensions}\n        />\n        <Tooltip data={tooltipData} />\n      </section>\n      <section>\n        <table>\n          <thead>\n            <tr>\n              {tableColumns.map((column, index) => (\n                <th key={`feature-${index}`}>{column}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tableRows.map((row, index) => (\n              <tr\n                key={`row-${index}`}\n                className={index === selectedRowIndex ? \"selected\" : \"\"}\n                onClick={() => setSelectedRowIndex(index)}\n              >\n                {tableColumns.map((column, index) => (\n                  <td key={`feature-${index}`}>{row[column]}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}