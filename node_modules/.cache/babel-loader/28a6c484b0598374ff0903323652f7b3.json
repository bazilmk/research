{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tomlaczik/research/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport \"./App.css\";\nconst cols = new Array(10).fill(1);\nconst rows = new Array(50).fill(1).map(() => cols.map(() => \"a\".repeat(Math.floor(Math.random() * 50))));\nconst data = {\n  title: \"analytics\",\n  color: \"#12939A\",\n  children: [{\n    title: \"AgglomerativeCluster\",\n    color: \"#12939A\",\n    size: 3938\n  }, {\n    title: \"CommunityStructure\",\n    color: \"#12939A\",\n    size: 3812\n  }, {\n    title: \"HierarchicalCluster\",\n    color: \"#12939A\",\n    size: 6714\n  }, {\n    title: \"MergeEdge\",\n    color: \"#12939A\",\n    size: 743\n  }]\n};\n\nfunction App() {\n  _s();\n\n  const [selectedRow, setSelectedRow] = useState();\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"mosaic\",\n      children: cols.map((col, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"a\"\n      }, `charta${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"main\",\n      children: [\"Selected row: \", selectedRow, /*#__PURE__*/_jsxDEV(Treemap, {\n        title: \"Test\",\n        width: 300,\n        height: 300,\n        data: data,\n        mode: \"squarify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: cols.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [\"Feature \", index]\n            }, `feat${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: index === selectedRow ? \"selected\" : \"\",\n            onClick: () => setSelectedRow(index),\n            children: row.map((col, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col\n            }, `cell${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this))\n          }, `row${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vZiItqkDSHsxkWfm0tjXQpV4p3g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tomlaczik/research/src/App.js"],"names":["useState","Treemap","cols","Array","fill","rows","map","repeat","Math","floor","random","data","title","color","children","size","App","selectedRow","setSelectedRow","col","index","row"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Treemap } from \"react-vis\";\n\nimport \"./App.css\";\n\nconst cols = new Array(10).fill(1);\nconst rows = new Array(50)\n  .fill(1)\n  .map(() => cols.map(() => \"a\".repeat(Math.floor(Math.random() * 50))));\n\nconst data = {\n  title: \"analytics\",\n  color: \"#12939A\",\n  children: [\n    { title: \"AgglomerativeCluster\", color: \"#12939A\", size: 3938 },\n    { title: \"CommunityStructure\", color: \"#12939A\", size: 3812 },\n    { title: \"HierarchicalCluster\", color: \"#12939A\", size: 6714 },\n    { title: \"MergeEdge\", color: \"#12939A\", size: 743 },\n  ],\n};\n\nfunction App() {\n  const [selectedRow, setSelectedRow] = useState();\n\n  return (\n    <main>\n      <section id=\"mosaic\">\n        {cols.map((col, index) => (\n          <div key={`charta${index}`}>a</div>\n        ))}\n      </section>\n      <section id=\"main\">\n        Selected row: {selectedRow}\n        <Treemap\n          title={\"Test\"}\n          width={300}\n          height={300}\n          data={data}\n          mode=\"squarify\"\n        />\n      </section>\n      <section>\n        <table>\n          <thead>\n            <tr>\n              {cols.map((col, index) => (\n                <th key={`feat${index}`}>Feature {index}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((row, index) => (\n              <tr\n                key={`row${index}`}\n                className={index === selectedRow ? \"selected\" : \"\"}\n                onClick={() => setSelectedRow(index)}\n              >\n                {row.map((col, index) => (\n                  <td key={`cell${index}`}>{col}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}