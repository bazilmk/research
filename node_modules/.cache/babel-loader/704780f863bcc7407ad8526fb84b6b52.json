{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tomlaczik/research/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport { Hint, Treemap } from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport \"./App.css\";\nconst features = [\"LotArea\", \"YearBuilt\", \"GrLivArea\", \"KitchenAbvGr\", \"FirstFlrSF\", \"PoolArea\", \"TotalBsmtSF\", \"BsmtFinSFOne\", \"BsmtUnfSF\", \"GarageYrBlt\", \"EnclosedPorch\", \"WoodDeckSF\", \"MSSubClass\", \"MiscVal\", \"OpenPorchSF\", \"ThreeSsnPorch\", \"YearRemodAdd\", \"YrSold\", \"GarageArea\", \"LowQualFinSF\", \"BsmtFinSFTwo\", \"OverallCond\", \"MoSold\", \"SecondFlrSF\", \"TotRmsAbvGrd\", \"ScreenPorch\", \"Fireplaces\", \"OverallQual\", \"HalfBath\", \"MasVnrArea\", \"GarageCars\", \"LotFrontage\", \"BsmtFullBath\", \"FullBath\", \"BedroomAbvGr\", \"BsmtHalfBath\"];\nconst tableColumns = [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features];\nconst tableRows = new Array(tableColumns.length).fill(1).map(() => new Array(tableColumns.length).fill(1).map(() => Math.random() * 1000 - 500));\n\nfunction App() {\n  _s();\n\n  const [selectedRow, setSelectedRow] = useState();\n  const treeChartData = useMemo(() => ({\n    children: selectedRow === undefined ? [] : tableRows[selectedRow].slice(4).map((column, index) => ({\n      title: features[index + 4],\n      size: Math.abs(column),\n      color: column < 0 ? \"#bf212f\" : \"#006f3c\"\n    }))\n  }), [selectedRow]);\n  const [treeMapDimensions, setTreeMapDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const treeMapContainer = useCallback(treeMapContainerElement => {\n    if (treeMapContainerElement !== null) {\n      const {\n        offsetWidth: width,\n        offsetHeight: height\n      } = treeMapContainerElement;\n      setTreeMapDimensions({\n        width,\n        height\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"mosaic\",\n      children: features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [feature, \" \", index]\n      }, `chart-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"main\",\n      ref: treeMapContainer,\n      children: /*#__PURE__*/_jsxDEV(Treemap, {\n        title: \"Test\",\n        data: treeChartData,\n        mode: \"circlePack\",\n        hideRootNode: true,\n        colorType: \"literal\",\n        onLeafMouseOver: console.log,\n        onLeafMouseOut: console.log,\n        onLeafClick: console.log,\n        ...treeMapDimensions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: tableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: column\n            }, `feature-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: index === selectedRow ? \"selected\" : \"\",\n            onClick: () => setSelectedRow(index),\n            children: row.map((col, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this))\n          }, `row-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sf1YeehIaKfZD6pu9gUZdXNAcGs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tomlaczik/research/src/App.js"],"names":["React","useCallback","useMemo","useRef","useState","Hint","Treemap","features","tableColumns","tableRows","Array","length","fill","map","Math","random","App","selectedRow","setSelectedRow","treeChartData","children","undefined","slice","column","index","title","size","abs","color","treeMapDimensions","setTreeMapDimensions","width","height","treeMapContainer","treeMapContainerElement","offsetWidth","offsetHeight","feature","console","log","row","col"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport { Hint, Treemap } from \"react-vis\";\n\nimport \"react-vis/dist/style.css\";\n\nimport \"./App.css\";\n\nconst features = [\n  \"LotArea\",\n  \"YearBuilt\",\n  \"GrLivArea\",\n  \"KitchenAbvGr\",\n  \"FirstFlrSF\",\n  \"PoolArea\",\n  \"TotalBsmtSF\",\n  \"BsmtFinSFOne\",\n  \"BsmtUnfSF\",\n  \"GarageYrBlt\",\n  \"EnclosedPorch\",\n  \"WoodDeckSF\",\n  \"MSSubClass\",\n  \"MiscVal\",\n  \"OpenPorchSF\",\n  \"ThreeSsnPorch\",\n  \"YearRemodAdd\",\n  \"YrSold\",\n  \"GarageArea\",\n  \"LowQualFinSF\",\n  \"BsmtFinSFTwo\",\n  \"OverallCond\",\n  \"MoSold\",\n  \"SecondFlrSF\",\n  \"TotRmsAbvGrd\",\n  \"ScreenPorch\",\n  \"Fireplaces\",\n  \"OverallQual\",\n  \"HalfBath\",\n  \"MasVnrArea\",\n  \"GarageCars\",\n  \"LotFrontage\",\n  \"BsmtFullBath\",\n  \"FullBath\",\n  \"BedroomAbvGr\",\n  \"BsmtHalfBath\",\n];\n\nconst tableColumns = [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features];\n\nconst tableRows = new Array(tableColumns.length)\n  .fill(1)\n  .map(() =>\n    new Array(tableColumns.length).fill(1).map(() => Math.random() * 1000 - 500)\n  );\nfunction App() {\n  const [selectedRow, setSelectedRow] = useState();\n\n  const treeChartData = useMemo(\n    () => ({\n      children:\n        selectedRow === undefined\n          ? []\n          : tableRows[selectedRow].slice(4).map((column, index) => ({\n              title: features[index + 4],\n              size: Math.abs(column),\n              color: column < 0 ? \"#bf212f\" : \"#006f3c\",\n            })),\n    }),\n    [selectedRow]\n  );\n\n  const [treeMapDimensions, setTreeMapDimensions] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  const treeMapContainer = useCallback((treeMapContainerElement) => {\n    if (treeMapContainerElement !== null) {\n      const {\n        offsetWidth: width,\n        offsetHeight: height,\n      } = treeMapContainerElement;\n      setTreeMapDimensions({ width, height });\n    }\n  }, []);\n\n  return (\n    <main>\n      <section id=\"mosaic\">\n        {features.map((feature, index) => (\n          <div key={`chart-${index}`}>\n            {feature} {index}\n          </div>\n        ))}\n      </section>\n      <section id=\"main\" ref={treeMapContainer}>\n        <Treemap\n          title={\"Test\"}\n          data={treeChartData}\n          mode=\"circlePack\"\n          hideRootNode\n          colorType=\"literal\"\n          onLeafMouseOver={console.log}\n          onLeafMouseOut={console.log}\n          onLeafClick={console.log}\n          {...treeMapDimensions}\n        >\n          {/*<Hint value={13}>\n            <div style={{ background: \"black\" }}>\n              <h3>Value of hint</h3>\n        </div>\n          </Hint>*/}\n        </Treemap>\n      </section>\n      <section>\n        <table>\n          <thead>\n            <tr>\n              {tableColumns.map((column, index) => (\n                <th key={`feature-${index}`}>{column}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tableRows.map((row, index) => (\n              <tr\n                key={`row-${index}`}\n                className={index === selectedRow ? \"selected\" : \"\"}\n                onClick={() => setSelectedRow(index)}\n              >\n                {row.map((col, index) => (\n                  <td key={`cell-${index}`}>{col}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}