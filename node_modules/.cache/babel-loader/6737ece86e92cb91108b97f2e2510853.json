{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tomlaczik/research/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { LineSeries, MarkSeries, Treemap, VerticalBarSeries, XYPlot } from \"react-vis\";\nimport \"./App.css\";\nconst cols = new Array(10).fill(1);\nconst rows = new Array(50).fill(1).map(() => cols.map(() => \"a\".repeat(Math.floor(Math.random() * 50))));\nconst data = {\n  title: \"analytics\",\n  color: \"#000000\",\n  children: [{\n    title: \"cluster\",\n    children: [{\n      title: \"AgglomerativeCluster\",\n      color: \"#ffffff\",\n      size: 3938\n    }, {\n      title: \"CommunityStructure\",\n      color: \"#000000\",\n      size: 3812\n    }, {\n      title: \"HierarchicalCluster\",\n      color: \"#000000\",\n      size: 6714\n    }, {\n      title: \"MergeEdge\",\n      color: \"#000000\",\n      size: 743\n    }]\n  }]\n};\nconst datae = [{\n  x: 0,\n  y: 8\n}, {\n  x: 1,\n  y: 5\n}, {\n  x: 2,\n  y: 4\n}, {\n  x: 3,\n  y: 9\n}, {\n  x: 4,\n  y: 1\n}, {\n  x: 5,\n  y: 7\n}, {\n  x: 6,\n  y: 6\n}, {\n  x: 7,\n  y: 3\n}, {\n  x: 8,\n  y: 2\n}, {\n  x: 9,\n  y: 0\n}];\n\nfunction App() {\n  _s();\n\n  const [selectedRow, setSelectedRow] = useState();\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"mosaic\",\n      children: cols.map((col, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"a\"\n      }, `charta${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"main\",\n      children: [\"Selected row: \", selectedRow, /*#__PURE__*/_jsxDEV(Treemap, {\n        title: \"Test\",\n        width: 500,\n        height: 500,\n        data: data,\n        mode: \"binary\",\n        hideRootNode: true,\n        renderMode: \"SVG\",\n        colorType: \"literal\",\n        colorRange: [\"#000000\", \"#FFFFFF\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: cols.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [\"Feature \", index]\n            }, `feat${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: index === selectedRow ? \"selected\" : \"\",\n            onClick: () => setSelectedRow(index),\n            children: row.map((col, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: col\n            }, `cell${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this))\n          }, `row${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vZiItqkDSHsxkWfm0tjXQpV4p3g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tomlaczik/research/src/App.js"],"names":["useState","LineSeries","MarkSeries","Treemap","VerticalBarSeries","XYPlot","cols","Array","fill","rows","map","repeat","Math","floor","random","data","title","color","children","size","datae","x","y","App","selectedRow","setSelectedRow","col","index","row"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport {\n  LineSeries,\n  MarkSeries,\n  Treemap,\n  VerticalBarSeries,\n  XYPlot,\n} from \"react-vis\";\n\nimport \"./App.css\";\n\nconst cols = new Array(10).fill(1);\nconst rows = new Array(50)\n  .fill(1)\n  .map(() => cols.map(() => \"a\".repeat(Math.floor(Math.random() * 50))));\n\nconst data = {\n  title: \"analytics\",\n  color: \"#000000\",\n  children: [\n    {\n      title: \"cluster\",\n      children: [\n        { title: \"AgglomerativeCluster\", color: \"#ffffff\", size: 3938 },\n        { title: \"CommunityStructure\", color: \"#000000\", size: 3812 },\n        { title: \"HierarchicalCluster\", color: \"#000000\", size: 6714 },\n        { title: \"MergeEdge\", color: \"#000000\", size: 743 },\n      ],\n    },\n  ],\n};\n\nconst datae = [\n  { x: 0, y: 8 },\n  { x: 1, y: 5 },\n  { x: 2, y: 4 },\n  { x: 3, y: 9 },\n  { x: 4, y: 1 },\n  { x: 5, y: 7 },\n  { x: 6, y: 6 },\n  { x: 7, y: 3 },\n  { x: 8, y: 2 },\n  { x: 9, y: 0 },\n];\n\nfunction App() {\n  const [selectedRow, setSelectedRow] = useState();\n\n  return (\n    <main>\n      <section id=\"mosaic\">\n        {cols.map((col, index) => (\n          <div key={`charta${index}`}>a</div>\n        ))}\n      </section>\n      <section id=\"main\">\n        Selected row: {selectedRow}\n        <Treemap\n          title={\"Test\"}\n          width={500}\n          height={500}\n          data={data}\n          mode=\"binary\"\n          hideRootNode\n          renderMode=\"SVG\"\n          colorType=\"literal\"\n          colorRange={[\"#000000\", \"#FFFFFF\"]}\n        />\n      </section>\n      <section>\n        <table>\n          <thead>\n            <tr>\n              {cols.map((col, index) => (\n                <th key={`feat${index}`}>Feature {index}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {rows.map((row, index) => (\n              <tr\n                key={`row${index}`}\n                className={index === selectedRow ? \"selected\" : \"\"}\n                onClick={() => setSelectedRow(index)}\n              >\n                {row.map((col, index) => (\n                  <td key={`cell${index}`}>{col}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}