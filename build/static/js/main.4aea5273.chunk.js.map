{"version":3,"sources":["components/GlobalExplanations/GlobalExplanation.js","components/GlobalExplanations/GlobalExplanations.js","components/LocalExplanation/LocalExplanation.js","components/Table/Table.js","components/Tooltip/Tooltip.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalExplanation","props","feature","data","state","selectedDataPoint","dataPoints","reduce","previousRows","currentRow","currentX","firstBiggerElementIndex","findIndex","previousRow","x","insertionIndex","length","slice","y","Math","random","this","className","height","color","prevProps","selectedRowIndex","setState","find","dataPoint","Component","GlobalExplanations","features","id","map","index","COLORS","LocalExplanation","dimensions","width","displayMode","resetTooltipData","bind","updateTooltipData","updateSize","getPositiveChildren","getNegativeChildren","getChildren","getDataForWaterfall","tooltipData","ref","onMouseLeave","undefined","xType","colorType","onValueMouseOver","title","size","y0","tickLabelAngle","mode","hideRootNode","onLeafMouseOver","onLeafClick","args","console","log","padding","margin","containerElement","clientWidth","clientHeight","children","selectedRow","forEach","value","newChild","insertIndex","push","splice","collector","child","returnPositiveChilren","abs","URLSearchParams","window","location","search","get","Table","columns","setSelectedRowIndex","column","row","onClick","Tooltip","position","left","top","updatePosition","addEventListener","removeEventListener","style","background","event","clientX","clientY","PureComponent","Array","fill","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4aea5273.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  LineSeries,\n  MarkSeries,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\n\nimport \"./GlobalExplanation.css\";\n\nexport class GlobalExplanation extends Component {\n  constructor(props) {\n    super(props);\n\n    const { feature, data } = props;\n    this.state = {\n      selectedDataPoint: [],\n      dataPoints: data.reduce((previousRows, currentRow) => {\n        const currentX = currentRow[feature];\n\n        const firstBiggerElementIndex = previousRows.findIndex(\n          (previousRow) => previousRow.x > currentX\n        );\n\n        const insertionIndex =\n          firstBiggerElementIndex < 0\n            ? previousRows.length\n            : firstBiggerElementIndex;\n\n        return [\n          ...previousRows.slice(0, insertionIndex),\n          {\n            x: currentX,\n            y: currentX * Math.random(),\n          },\n          ...previousRows.slice(insertionIndex),\n        ];\n      }, []),\n    };\n  }\n\n  render() {\n    const { feature } = this.props;\n    const { dataPoints, selectedDataPoint } = this.state;\n    return (\n      <div className=\"global-explanation\">\n        {feature}\n\n        <FlexibleWidthXYPlot height={200}>\n          <HorizontalGridLines />\n          <LineSeries color=\"blue\" data={dataPoints} />\n          <MarkSeries color=\"orange\" data={selectedDataPoint} />\n          <XAxis />\n          <YAxis />\n        </FlexibleWidthXYPlot>\n      </div>\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedRowIndex } = this.props;\n    if (prevProps.selectedRowIndex !== selectedRowIndex) {\n      const { feature, data } = this.props;\n      const { dataPoints } = this.state;\n      this.setState({\n        selectedDataPoint: [\n          dataPoints.find(\n            (dataPoint) => dataPoint.x === data[selectedRowIndex][feature]\n          ),\n        ],\n      });\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport { GlobalExplanation } from \"./GlobalExplanation\";\n\nimport \"./GlobalExplanations.css\";\n\nexport class GlobalExplanations extends Component {\n  render() {\n    const { features, selectedRowIndex, data } = this.props;\n    return (\n      <section id=\"global-explanations\">\n        {features.map((feature, index) => (\n          <GlobalExplanation\n            feature={feature}\n            key={`chart-${index}`}\n            selectedRowIndex={selectedRowIndex}\n            data={data}\n          />\n        ))}\n      </section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  FlexibleXYPlot,\n  HorizontalGridLines,\n  Treemap,\n  VerticalBarSeries,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\nimport { Tooltip } from \"..\";\n\nimport \"./LocalExplanation.css\";\n\nconst COLORS = {\n  red: \"#bf212f\",\n  green: \"#006f3c\",\n};\n\nexport class LocalExplanation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dimensions: { width: 0, height: 0 },\n      displayMode: \"resquarify\",\n    };\n\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateSize = this.updateSize.bind(this);\n\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n\n    this.getDataForWaterfall = this.getDataForWaterfall.bind(this);\n  }\n\n  render() {\n    const { selectedRowIndex } = this.props;\n    const { data, dimensions, displayMode, tooltipData } = this.state;\n\n    return (\n      <section\n        id=\"treemap-container\"\n        ref={this.updateSize}\n        onMouseLeave={this.resetTooltipData}\n      >\n        {selectedRowIndex === undefined ? (\n          \"Select a row in the table below\"\n        ) : (\n          <>\n            {displayMode === \"waterfall\" ? (\n              <FlexibleXYPlot xType=\"ordinal\">\n                <HorizontalGridLines />\n                <VerticalBarSeries\n                  data={data}\n                  colorType=\"literal\"\n                  onValueMouseOver={(data) =>\n                    this.updateTooltipData({\n                      title: data.x,\n                      size: data.y - data.y0,\n                      color: data.color,\n                    })\n                  }\n                />\n                <XAxis title=\"Feature\" tickLabelAngle={270} />\n                <YAxis title=\"Contribution\" />\n              </FlexibleXYPlot>\n            ) : (\n              <Treemap\n                title={\"Test\"}\n                data={data}\n                mode={displayMode}\n                hideRootNode\n                colorType=\"literal\"\n                onLeafMouseOver={({ data }) => this.updateTooltipData(data)}\n                onLeafClick={(...args) => console.log(\"klikk\", [args])}\n                padding={1}\n                margin={0}\n                {...dimensions}\n              />\n            )}\n            <Tooltip data={tooltipData} />\n          </>\n        )}\n      </section>\n    );\n  }\n\n  resetTooltipData() {\n    this.setState({ tooltipData: undefined });\n  }\n\n  updateTooltipData(data) {\n    this.setState({ tooltipData: data });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const { clientWidth: width, clientHeight: height } = containerElement;\n      this.setState({ dimensions: { width, height } });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedRowIndex } = this.props;\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      let data;\n      if (this.state.displayMode === \"waterfall\") {\n        data = this.getDataForWaterfall();\n      } else {\n        data = {\n          children: [\n            {\n              title: \"Negative\",\n              children: this.getPositiveChildren(),\n              color: \"none\",\n            },\n            {\n              title: \"Positive\",\n              children: this.getNegativeChildren(),\n              color: \"none\",\n            },\n          ],\n        };\n      }\n      this.setState({\n        data,\n      });\n    }\n  }\n\n  getDataForWaterfall() {\n    const { selectedRowIndex } = this.props;\n\n    if (selectedRowIndex === undefined) return [];\n\n    const children = [];\n\n    const selectedRow = this.props.data[selectedRowIndex];\n\n    this.props.features.forEach((feature) => {\n      const value = selectedRow[feature];\n      const newChild = {\n        x: feature,\n        y: value,\n        color: value < 0 ? COLORS.red : COLORS.green,\n      };\n\n      const insertIndex = children.findIndex(({ y }) => y > value);\n\n      if (insertIndex === -1) {\n        children.push(newChild);\n      } else {\n        children.splice(insertIndex, 0, newChild);\n      }\n    });\n\n    return children.reduce(\n      (collector, child, index) => [\n        ...collector,\n        index > 0\n          ? {\n              ...child,\n              y: collector[index - 1].y + child.y,\n              y0: collector[index - 1].y,\n            }\n          : { ...child, y0: 0 },\n      ],\n      []\n    );\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const { selectedRowIndex } = this.props;\n\n    if (selectedRowIndex === undefined) return [];\n\n    const children = [];\n\n    const selectedRow = this.props.data[selectedRowIndex];\n    const color = returnPositiveChilren ? COLORS.green : COLORS.red;\n    this.props.features.forEach((feature) => {\n      const value = selectedRow[feature];\n      if ((!returnPositiveChilren && value < 0) || returnPositiveChilren)\n        children.push({ title: feature, size: Math.abs(value), color });\n    });\n    return children;\n  }\n\n  componentDidMount() {\n    const searchParams = new URLSearchParams(window.location.search);\n\n    let displayMode;\n    switch (searchParams.get(\"v\")) {\n      case \"b\":\n        displayMode = \"circlePack\";\n        break;\n      case \"t\":\n        displayMode = \"resquarify\";\n        break;\n      default:\n        displayMode = \"waterfall\";\n        break;\n    }\n    this.setState({ displayMode });\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./Table.css\";\n\nexport class Table extends Component {\n  constructor(props) {\n    super(props);\n\n    const { features } = props;\n    this.state = {\n      columns: [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features],\n    };\n  }\n\n  render() {\n    const { data, selectedRowIndex, setSelectedRowIndex } = this.props;\n    const { columns } = this.state;\n    return (\n      <section>\n        <table>\n          <thead>\n            <tr>\n              {columns.map((column, index) => (\n                <th key={`feature-${index}`}>{column}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((row, index) => (\n              <tr\n                key={`row-${index}`}\n                className={index === selectedRowIndex ? \"selected\" : \"\"}\n                onClick={() => setSelectedRowIndex(index)}\n              >\n                {columns.map((column, index) => (\n                  <td key={`feature-${index}`}>{row[column]}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\n\nimport \"./Tooltip.css\";\n\nexport class Tooltip extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      position: { left: 0, top: 0 },\n    };\n\n    this.updatePosition = this.updatePosition.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"mousemove\", this.updatePosition);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"mousemove\", this.updatePosition);\n  }\n\n  render() {\n    const { left, top } = this.state.position;\n    const { data } = this.props;\n    return data && data.size ? (\n      <div id=\"tooltip\" style={{ left, top, background: data.color }}>\n        {data.title}\n        <br />\n        {data.size}\n      </div>\n    ) : (\n      <></>\n    );\n  }\n\n  updatePosition(event) {\n    const { clientX: left, clientY: top } = event;\n    this.setState({ position: { left, top } });\n  }\n}\n","import React, { useState } from \"react\";\n\nimport \"react-vis/dist/style.css\";\n\nimport \"./App.css\";\nimport { GlobalExplanations, LocalExplanation, Table } from \"./components\";\n\nconst features = [\n  \"LotArea\",\n  \"YearBuilt\",\n  \"GrLivArea\",\n  \"KitchenAbvGr\",\n  \"FirstFlrSF\",\n  \"PoolArea\",\n  \"TotalBsmtSF\",\n  \"BsmtFinSFOne\",\n  \"BsmtUnfSF\",\n  \"GarageYrBlt\",\n  \"EnclosedPorch\",\n  \"WoodDeckSF\",\n  \"MSSubClass\",\n  \"MiscVal\",\n  \"OpenPorchSF\",\n  \"ThreeSsnPorch\",\n  \"YearRemodAdd\",\n  \"YrSold\",\n  \"GarageArea\",\n  \"LowQualFinSF\",\n  \"BsmtFinSFTwo\",\n  \"OverallCond\",\n  \"MoSold\",\n  \"SecondFlrSF\",\n  \"TotRmsAbvGrd\",\n  \"ScreenPorch\",\n  \"Fireplaces\",\n  \"OverallQual\",\n  \"HalfBath\",\n  \"MasVnrArea\",\n  \"GarageCars\",\n  \"LotFrontage\",\n  \"BsmtFullBath\",\n  \"FullBath\",\n  \"BedroomAbvGr\",\n  \"BsmtHalfBath\",\n];\n\nconst data = new Array(features.length).fill(1).map(() => {\n  const row = {};\n  features.forEach((feature) => (row[feature] = Math.random() * 1000 - 500));\n  return row;\n});\n\nfunction App() {\n  const [selectedRowIndex, setSelectedRowIndex] = useState();\n\n  return (\n    <main>\n      <GlobalExplanations\n        data={data}\n        features={features}\n        selectedRowIndex={selectedRowIndex}\n      />\n      <LocalExplanation\n        data={data}\n        features={features}\n        selectedRowIndex={selectedRowIndex}\n      />\n      <Table\n        features={features}\n        setSelectedRowIndex={setSelectedRowIndex}\n        selectedRowIndex={selectedRowIndex}\n        data={data}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}