{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tomlaczik/research/src/components/LocalExplanation/LocalExplanation.js\";\nimport React, { Component } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport { Tooltip } from \"..\";\nimport \"./LocalExplanation.css\";\nexport class LocalExplanation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: {\n        width: 0,\n        height: 0\n      },\n      displayMode: \"resquarify\"\n    };\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateSize = this.updateSize.bind(this);\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n    this.updateDisplayMode = this.updateDisplayMode.bind(this);\n  }\n\n  render() {\n    const {\n      selectedRowIndex\n    } = this.props;\n    const {\n      data,\n      dimensions,\n      displayMode,\n      tooltipData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"treemap-container\",\n      ref: this.updateSize,\n      onMouseLeave: this.resetTooltipData,\n      children: selectedRowIndex === undefined ? \"Select a row in the table below\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Treemap, {\n          title: \"Test\",\n          data: data,\n          mode: displayMode,\n          hideRootNode: true,\n          colorType: \"literal\",\n          onLeafMouseOver: ({\n            data\n          }) => this.updateTooltipData(data),\n          onLeafClick: (...args) => console.log(\"klikk\", [args]),\n          padding: 1,\n          margin: 0,\n          ...dimensions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          data: tooltipData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Display mode\", /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: this.updateDisplayMode,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"resquarify\",\n              children: \"resquarify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"circlePack\",\n              children: \"circlePack\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"waterfall\",\n              disabled: true,\n              children: \"waterfall\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n  resetTooltipData() {\n    this.setState({\n      tooltipData: undefined\n    });\n  }\n\n  updateTooltipData(data) {\n    this.setState({\n      tooltipData: data\n    });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = containerElement;\n      this.setState({\n        dimensions: {\n          width,\n          height\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      selectedRowIndex\n    } = this.props;\n\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      this.setState({\n        data: {\n          children: [{\n            title: \"Negative\",\n            children: this.getPositiveChildren(),\n            color: \"none\"\n          }, {\n            title: \"Positive\",\n            children: this.getNegativeChildren(),\n            color: \"none\"\n          }]\n        }\n      });\n    }\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const {\n      selectedRowIndex\n    } = this.props;\n    if (selectedRowIndex === undefined) return [];\n    const children = [];\n    const selectedRow = this.props.data[selectedRowIndex];\n    const color = returnPositiveChilren ? \"#006f3c\" : \"#bf212f\";\n    this.props.features.forEach(feature => {\n      const value = selectedRow[feature];\n      if (!returnPositiveChilren && value < 0 || returnPositiveChilren) children.push({\n        title: feature,\n        size: Math.abs(value),\n        color\n      });\n    });\n    return children;\n  }\n\n  updateDisplayMode({\n    target: {\n      value: displayMode\n    }\n  }) {\n    this.setState({\n      displayMode\n    });\n  }\n\n  componentDidMount() {\n    const searchParams = new URLSearchParams(window.location.search);\n    let displayMode;\n\n    switch (searchParams.get(\"v\")) {\n      case \"b\":\n        displayMode = \"circlePack\";\n        break;\n\n      case \"t\":\n        displayMode = \"resquarify\";\n        break;\n\n      default:\n        //displayMode = \"waterfall\";\n        displayMode = \"resquarify\";\n        break;\n    }\n\n    this.setState({\n      displayMode\n    });\n    console.log(\"MOUNTED\", displayMode);\n  }\n\n}","map":{"version":3,"sources":["/Users/tomlaczik/research/src/components/LocalExplanation/LocalExplanation.js"],"names":["React","Component","Treemap","Tooltip","LocalExplanation","constructor","props","state","dimensions","width","height","displayMode","resetTooltipData","bind","updateTooltipData","updateSize","getPositiveChildren","getNegativeChildren","getChildren","updateDisplayMode","render","selectedRowIndex","data","tooltipData","undefined","args","console","log","setState","containerElement","clientWidth","clientHeight","componentDidUpdate","prevProps","children","title","color","returnPositiveChilren","selectedRow","features","forEach","feature","value","push","size","Math","abs","target","componentDidMount","searchParams","URLSearchParams","window","location","search","get"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport { Tooltip } from \"..\";\n\nimport \"./LocalExplanation.css\";\n\nexport class LocalExplanation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dimensions: { width: 0, height: 0 },\n      displayMode: \"resquarify\",\n    };\n\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateSize = this.updateSize.bind(this);\n\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n\n    this.updateDisplayMode = this.updateDisplayMode.bind(this);\n  }\n\n  render() {\n    const { selectedRowIndex } = this.props;\n    const { data, dimensions, displayMode, tooltipData } = this.state;\n\n    return (\n      <section\n        id=\"treemap-container\"\n        ref={this.updateSize}\n        onMouseLeave={this.resetTooltipData}\n      >\n        {selectedRowIndex === undefined ? (\n          \"Select a row in the table below\"\n        ) : (\n          <>\n            <Treemap\n              title={\"Test\"}\n              data={data}\n              mode={displayMode}\n              hideRootNode\n              colorType=\"literal\"\n              onLeafMouseOver={({ data }) => this.updateTooltipData(data)}\n              onLeafClick={(...args) => console.log(\"klikk\", [args])}\n              padding={1}\n              margin={0}\n              {...dimensions}\n            />\n            <Tooltip data={tooltipData} />\n            <label>\n              Display mode\n              <select onChange={this.updateDisplayMode}>\n                <option value=\"resquarify\">resquarify</option>\n                <option value=\"circlePack\">circlePack</option>\n                <option value=\"waterfall\" disabled>\n                  waterfall\n                </option>\n              </select>\n            </label>\n          </>\n        )}\n      </section>\n    );\n  }\n\n  resetTooltipData() {\n    this.setState({ tooltipData: undefined });\n  }\n\n  updateTooltipData(data) {\n    this.setState({ tooltipData: data });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const { clientWidth: width, clientHeight: height } = containerElement;\n      this.setState({ dimensions: { width, height } });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedRowIndex } = this.props;\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      this.setState({\n        data: {\n          children: [\n            {\n              title: \"Negative\",\n              children: this.getPositiveChildren(),\n              color: \"none\",\n            },\n            {\n              title: \"Positive\",\n              children: this.getNegativeChildren(),\n              color: \"none\",\n            },\n          ],\n        },\n      });\n    }\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const { selectedRowIndex } = this.props;\n\n    if (selectedRowIndex === undefined) return [];\n\n    const children = [];\n\n    const selectedRow = this.props.data[selectedRowIndex];\n    const color = returnPositiveChilren ? \"#006f3c\" : \"#bf212f\";\n    this.props.features.forEach((feature) => {\n      const value = selectedRow[feature];\n      if ((!returnPositiveChilren && value < 0) || returnPositiveChilren)\n        children.push({ title: feature, size: Math.abs(value), color });\n    });\n    return children;\n  }\n\n  updateDisplayMode({ target: { value: displayMode } }) {\n    this.setState({ displayMode });\n  }\n\n  componentDidMount() {\n    const searchParams = new URLSearchParams(window.location.search);\n\n    let displayMode;\n    switch (searchParams.get(\"v\")) {\n      case \"b\":\n        displayMode = \"circlePack\";\n        break;\n      case \"t\":\n        displayMode = \"resquarify\";\n        break;\n      default:\n        //displayMode = \"waterfall\";\n        displayMode = \"resquarify\";\n        break;\n    }\n    this.setState({ displayMode });\n\n    console.log(\"MOUNTED\", displayMode);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}