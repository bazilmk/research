{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tomlaczik/research/src/components/TreemapContainer/TreemapContainer.js\";\nimport React, { Component } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport { Tooltip } from \"..\";\nexport class TreemapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: {\n        width: 0,\n        height: 0\n      },\n      displayMode: \"slicedice\"\n    };\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateSize = this.updateSize.bind(this);\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n  }\n\n  render() {\n    const {\n      selectedRowIndex\n    } = this.props;\n    const {\n      data,\n      dimensions,\n      displayMode,\n      tooltipData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"main\",\n      ref: this.updateSize,\n      onMouseLeave: this.resetTooltipData,\n      children: [selectedRowIndex === undefined && \"Select a row in the table below\", /*#__PURE__*/_jsxDEV(Treemap, {\n        title: \"Test\",\n        data: data,\n        mode: displayMode,\n        hideRootNode: true,\n        colorType: \"literal\",\n        onLeafMouseOver: ({\n          data\n        }) => this.updateTooltipData(data),\n        onLeafClick: (...args) => console.log(\"klikk\", [args]),\n        padding: 1,\n        margin: 0,\n        ...dimensions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        data: tooltipData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n  resetTooltipData() {\n    this.setState({\n      tooltipData: undefined\n    });\n  }\n\n  updateTooltipData(data) {\n    this.setState({\n      tooltipData: data\n    });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = containerElement;\n      this.setState({\n        dimensions: {\n          width,\n          height\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      selectedRowIndex\n    } = this.props;\n\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      this.setState({\n        data: {\n          children: [{\n            title: \"Negative\",\n            children: this.getPositiveChildren(),\n            color: \"none\"\n          }, {\n            title: \"Positive\",\n            children: this.getNegativeChildren(),\n            color: \"none\"\n          }]\n        }\n      });\n    }\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const {\n      selectedRowIndex\n    } = this.props;\n    if (selectedRowIndex === undefined) return [];\n    const children = [];\n    const selectedRow = this.props.tableRows[selectedRowIndex];\n    const color = returnPositiveChilren ? \"#006f3c\" : \"#bf212f\";\n    this.props.features.forEach(feature => {\n      const value = selectedRow[feature];\n      if (!returnPositiveChilren && value < 0 || returnPositiveChilren) children.push({\n        title: feature,\n        size: Math.abs(value),\n        color\n      });\n    });\n    return children;\n  }\n\n}","map":{"version":3,"sources":["/Users/tomlaczik/research/src/components/TreemapContainer/TreemapContainer.js"],"names":["React","Component","Treemap","Tooltip","TreemapContainer","constructor","props","state","dimensions","width","height","displayMode","resetTooltipData","bind","updateTooltipData","updateSize","getPositiveChildren","getNegativeChildren","getChildren","render","selectedRowIndex","data","tooltipData","undefined","args","console","log","setState","containerElement","clientWidth","clientHeight","componentDidUpdate","prevProps","children","title","color","returnPositiveChilren","selectedRow","tableRows","features","forEach","feature","value","push","size","Math","abs"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport { Tooltip } from \"..\";\n\nexport class TreemapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dimensions: { width: 0, height: 0 },\n      displayMode: \"slicedice\",\n    };\n\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateSize = this.updateSize.bind(this);\n\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n  }\n\n  render() {\n    const { selectedRowIndex } = this.props;\n    const { data, dimensions, displayMode, tooltipData } = this.state;\n\n    return (\n      <section\n        id=\"main\"\n        ref={this.updateSize}\n        onMouseLeave={this.resetTooltipData}\n      >\n        {selectedRowIndex === undefined && \"Select a row in the table below\"}\n        <Treemap\n          title={\"Test\"}\n          data={data}\n          mode={displayMode}\n          hideRootNode\n          colorType=\"literal\"\n          onLeafMouseOver={({ data }) => this.updateTooltipData(data)}\n          onLeafClick={(...args) => console.log(\"klikk\", [args])}\n          padding={1}\n          margin={0}\n          {...dimensions}\n        />\n        <Tooltip data={tooltipData} />\n      </section>\n    );\n  }\n\n  resetTooltipData() {\n    this.setState({ tooltipData: undefined });\n  }\n\n  updateTooltipData(data) {\n    this.setState({ tooltipData: data });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const { clientWidth: width, clientHeight: height } = containerElement;\n      this.setState({ dimensions: { width, height } });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedRowIndex } = this.props;\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      this.setState({\n        data: {\n          children: [\n            {\n              title: \"Negative\",\n              children: this.getPositiveChildren(),\n              color: \"none\",\n            },\n            {\n              title: \"Positive\",\n              children: this.getNegativeChildren(),\n              color: \"none\",\n            },\n          ],\n        },\n      });\n    }\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const { selectedRowIndex } = this.props;\n\n    if (selectedRowIndex === undefined) return [];\n\n    const children = [];\n\n    const selectedRow = this.props.tableRows[selectedRowIndex];\n    const color = returnPositiveChilren ? \"#006f3c\" : \"#bf212f\";\n    this.props.features.forEach((feature) => {\n      const value = selectedRow[feature];\n      if ((!returnPositiveChilren && value < 0) || returnPositiveChilren)\n        children.push({ title: feature, size: Math.abs(value), color });\n    });\n    return children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}