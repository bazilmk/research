{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tomlaczik/research/src/components/TreemapContainer/TreemapContainer.js\";\nimport React, { Component } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport { Tooltip } from \"..\";\nexport class TreemapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treemapDimensions: {\n        width: 0,\n        height: 0\n      }\n    };\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateTreemapSize = this.updateTreemapSize.bind(this);\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n  }\n\n  render() {\n    const {\n      selectedRowIndex\n    } = this.props;\n    const {\n      tooltipData,\n      treemapData,\n      treemapDimensions\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"main\",\n      ref: this.container,\n      onMouseLeave: this.resetTooltipData,\n      children: [selectedRowIndex === undefined && \"Select a row in the table below\", /*#__PURE__*/_jsxDEV(Treemap, {\n        title: \"Test\",\n        data: treemapData,\n        mode: \"squarify\",\n        hideRootNode: true,\n        colorType: \"literal\",\n        onLeafMouseOver: ({\n          data\n        }) => this.updateTooltipData(data),\n        onLeafClick: (...args) => console.log(\"klikk\", [args]),\n        padding: 1,\n        margin: 0,\n        ...treemapDimensions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        data: tooltipData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n  resetTooltipData() {\n    this.setState({\n      tooltipData: undefined\n    });\n  }\n\n  updateTooltipData(data) {\n    this.setState({\n      tooltipData: data\n    });\n  }\n\n  updateTreemapSize(treemapContainerElement) {\n    if (treemapContainerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = treemapContainerElement;\n      this.setState({\n        treemapDimensions: {\n          width,\n          height\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      selectedRowIndex\n    } = this.props;\n\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      console.log({\n        treemapData: {\n          children: [{\n            title: \"Negative\",\n            children: this.getPositiveChildren(),\n            color: \"none\"\n          }, {\n            title: \"Positive\",\n            children: this.getNegativeChildren(),\n            color: \"none\"\n          }]\n        }\n      });\n      this.setState({\n        treemapData: {\n          children: [{\n            title: \"Negative\",\n            children: this.getPositiveChildren(),\n            color: \"none\"\n          }, {\n            title: \"Positive\",\n            children: this.getNegativeChildren(),\n            color: \"none\"\n          }]\n        }\n      });\n    }\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const {\n      selectedRowIndex\n    } = this.props;\n    if (selectedRowIndex === undefined) return [];\n    const children = [];\n    const selectedRow = this.props.tableRows[selectedRowIndex];\n    const color = returnPositiveChilren ? \"#bf212f\" : \"#006f3c\";\n    this.props.features.forEach(feature => {\n      const value = selectedRow[feature];\n      if (!returnPositiveChilren && value < 0 || returnPositiveChilren) children.push({\n        title: feature,\n        size: Math.abs(value),\n        color,\n        value\n      });\n    });\n    return children;\n  }\n\n}","map":{"version":3,"sources":["/Users/tomlaczik/research/src/components/TreemapContainer/TreemapContainer.js"],"names":["React","Component","Treemap","Tooltip","TreemapContainer","constructor","props","state","treemapDimensions","width","height","resetTooltipData","bind","updateTooltipData","updateTreemapSize","getPositiveChildren","getNegativeChildren","getChildren","render","selectedRowIndex","tooltipData","treemapData","container","undefined","data","args","console","log","setState","treemapContainerElement","clientWidth","clientHeight","componentDidUpdate","prevProps","children","title","color","returnPositiveChilren","selectedRow","tableRows","features","forEach","feature","value","push","size","Math","abs"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,IAAxB;AAEA,OAAO,MAAMC,gBAAN,SAA+BH,SAA/B,CAAyC;AAC9CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,iBAAiB,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB;AADR,KAAb;AAIA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBF,IAAvB,CAA4B,IAA5B,CAAzB;AAEA,SAAKG,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBH,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKI,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBJ,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKK,WAAL,GAAmB,KAAKA,WAAL,CAAiBL,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAuB,KAAKb,KAAlC;AACA,UAAM;AAAEc,MAAAA,WAAF;AAAeC,MAAAA,WAAf;AAA4Bb,MAAAA;AAA5B,QAAkD,KAAKD,KAA7D;AAEA,wBACE;AACE,MAAA,EAAE,EAAC,MADL;AAEE,MAAA,GAAG,EAAE,KAAKe,SAFZ;AAGE,MAAA,YAAY,EAAE,KAAKX,gBAHrB;AAAA,iBAKGQ,gBAAgB,KAAKI,SAArB,IAAkC,iCALrC,eAME,QAAC,OAAD;AACE,QAAA,KAAK,EAAE,MADT;AAEE,QAAA,IAAI,EAAEF,WAFR;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,YAAY,MAJd;AAKE,QAAA,SAAS,EAAC,SALZ;AAME,QAAA,eAAe,EAAE,CAAC;AAAEG,UAAAA;AAAF,SAAD,KAAc,KAAKX,iBAAL,CAAuBW,IAAvB,CANjC;AAOE,QAAA,WAAW,EAAE,CAAC,GAAGC,IAAJ,KAAaC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,CAACF,IAAD,CAArB,CAP5B;AAQE,QAAA,OAAO,EAAE,CARX;AASE,QAAA,MAAM,EAAE,CATV;AAAA,WAUMjB;AAVN;AAAA;AAAA;AAAA;AAAA,cANF,eAkBE,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEY;AAAf;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD;;AAEDT,EAAAA,gBAAgB,GAAG;AACjB,SAAKiB,QAAL,CAAc;AAAER,MAAAA,WAAW,EAAEG;AAAf,KAAd;AACD;;AAEDV,EAAAA,iBAAiB,CAACW,IAAD,EAAO;AACtB,SAAKI,QAAL,CAAc;AAAER,MAAAA,WAAW,EAAEI;AAAf,KAAd;AACD;;AAEDV,EAAAA,iBAAiB,CAACe,uBAAD,EAA0B;AACzC,QAAIA,uBAAuB,KAAK,IAAhC,EAAsC;AACpC,YAAM;AACJC,QAAAA,WAAW,EAAErB,KADT;AAEJsB,QAAAA,YAAY,EAAErB;AAFV,UAGFmB,uBAHJ;AAIA,WAAKD,QAAL,CAAc;AAAEpB,QAAAA,iBAAiB,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT;AAArB,OAAd;AACD;AACF;;AAEDsB,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAM;AAAEd,MAAAA;AAAF,QAAuB,KAAKb,KAAlC;;AACA,QAAIa,gBAAgB,KAAKc,SAAS,CAACd,gBAAnC,EAAqD;AACnDO,MAAAA,OAAO,CAACC,GAAR,CAAY;AACVN,QAAAA,WAAW,EAAE;AACXa,UAAAA,QAAQ,EAAE,CACR;AACEC,YAAAA,KAAK,EAAE,UADT;AAEED,YAAAA,QAAQ,EAAE,KAAKnB,mBAAL,EAFZ;AAGEqB,YAAAA,KAAK,EAAE;AAHT,WADQ,EAMR;AACED,YAAAA,KAAK,EAAE,UADT;AAEED,YAAAA,QAAQ,EAAE,KAAKlB,mBAAL,EAFZ;AAGEoB,YAAAA,KAAK,EAAE;AAHT,WANQ;AADC;AADH,OAAZ;AAgBA,WAAKR,QAAL,CAAc;AACZP,QAAAA,WAAW,EAAE;AACXa,UAAAA,QAAQ,EAAE,CACR;AACEC,YAAAA,KAAK,EAAE,UADT;AAEED,YAAAA,QAAQ,EAAE,KAAKnB,mBAAL,EAFZ;AAGEqB,YAAAA,KAAK,EAAE;AAHT,WADQ,EAMR;AACED,YAAAA,KAAK,EAAE,UADT;AAEED,YAAAA,QAAQ,EAAE,KAAKlB,mBAAL,EAFZ;AAGEoB,YAAAA,KAAK,EAAE;AAHT,WANQ;AADC;AADD,OAAd;AAgBD;AACF;;AAEDrB,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKE,WAAL,CAAiB,IAAjB,CAAP;AACD;;AAEDD,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKC,WAAL,CAAiB,KAAjB,CAAP;AACD;;AAEDA,EAAAA,WAAW,CAACoB,qBAAD,EAAwB;AACjC,UAAM;AAAElB,MAAAA;AAAF,QAAuB,KAAKb,KAAlC;AAEA,QAAIa,gBAAgB,KAAKI,SAAzB,EAAoC,OAAO,EAAP;AAEpC,UAAMW,QAAQ,GAAG,EAAjB;AAEA,UAAMI,WAAW,GAAG,KAAKhC,KAAL,CAAWiC,SAAX,CAAqBpB,gBAArB,CAApB;AACA,UAAMiB,KAAK,GAAGC,qBAAqB,GAAG,SAAH,GAAe,SAAlD;AACA,SAAK/B,KAAL,CAAWkC,QAAX,CAAoBC,OAApB,CAA6BC,OAAD,IAAa;AACvC,YAAMC,KAAK,GAAGL,WAAW,CAACI,OAAD,CAAzB;AACA,UAAK,CAACL,qBAAD,IAA0BM,KAAK,GAAG,CAAnC,IAAyCN,qBAA7C,EACEH,QAAQ,CAACU,IAAT,CAAc;AAAET,QAAAA,KAAK,EAAEO,OAAT;AAAkBG,QAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAxB;AAAyCP,QAAAA,KAAzC;AAAgDO,QAAAA;AAAhD,OAAd;AACH,KAJD;AAKA,WAAOT,QAAP;AACD;;AA5H6C","sourcesContent":["import React, { Component } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport { Tooltip } from \"..\";\n\nexport class TreemapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      treemapDimensions: { width: 0, height: 0 },\n    };\n\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateTreemapSize = this.updateTreemapSize.bind(this);\n\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n  }\n\n  render() {\n    const { selectedRowIndex } = this.props;\n    const { tooltipData, treemapData, treemapDimensions } = this.state;\n\n    return (\n      <section\n        id=\"main\"\n        ref={this.container}\n        onMouseLeave={this.resetTooltipData}\n      >\n        {selectedRowIndex === undefined && \"Select a row in the table below\"}\n        <Treemap\n          title={\"Test\"}\n          data={treemapData}\n          mode=\"squarify\"\n          hideRootNode\n          colorType=\"literal\"\n          onLeafMouseOver={({ data }) => this.updateTooltipData(data)}\n          onLeafClick={(...args) => console.log(\"klikk\", [args])}\n          padding={1}\n          margin={0}\n          {...treemapDimensions}\n        />\n        <Tooltip data={tooltipData} />\n      </section>\n    );\n  }\n\n  resetTooltipData() {\n    this.setState({ tooltipData: undefined });\n  }\n\n  updateTooltipData(data) {\n    this.setState({ tooltipData: data });\n  }\n\n  updateTreemapSize(treemapContainerElement) {\n    if (treemapContainerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height,\n      } = treemapContainerElement;\n      this.setState({ treemapDimensions: { width, height } });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedRowIndex } = this.props;\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      console.log({\n        treemapData: {\n          children: [\n            {\n              title: \"Negative\",\n              children: this.getPositiveChildren(),\n              color: \"none\",\n            },\n            {\n              title: \"Positive\",\n              children: this.getNegativeChildren(),\n              color: \"none\",\n            },\n          ],\n        },\n      });\n      this.setState({\n        treemapData: {\n          children: [\n            {\n              title: \"Negative\",\n              children: this.getPositiveChildren(),\n              color: \"none\",\n            },\n            {\n              title: \"Positive\",\n              children: this.getNegativeChildren(),\n              color: \"none\",\n            },\n          ],\n        },\n      });\n    }\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const { selectedRowIndex } = this.props;\n\n    if (selectedRowIndex === undefined) return [];\n\n    const children = [];\n\n    const selectedRow = this.props.tableRows[selectedRowIndex];\n    const color = returnPositiveChilren ? \"#bf212f\" : \"#006f3c\";\n    this.props.features.forEach((feature) => {\n      const value = selectedRow[feature];\n      if ((!returnPositiveChilren && value < 0) || returnPositiveChilren)\n        children.push({ title: feature, size: Math.abs(value), color, value });\n    });\n    return children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}