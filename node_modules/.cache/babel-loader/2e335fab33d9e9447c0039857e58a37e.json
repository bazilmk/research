{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tomlaczik/research/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, XAxis, YAxis } from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport \"./App.css\";\nimport { TreemapContainer } from \"./components\";\nconst features = [\"LotArea\", \"YearBuilt\", \"GrLivArea\", \"KitchenAbvGr\", \"FirstFlrSF\", \"PoolArea\", \"TotalBsmtSF\", \"BsmtFinSFOne\", \"BsmtUnfSF\", \"GarageYrBlt\", \"EnclosedPorch\", \"WoodDeckSF\", \"MSSubClass\", \"MiscVal\", \"OpenPorchSF\", \"ThreeSsnPorch\", \"YearRemodAdd\", \"YrSold\", \"GarageArea\", \"LowQualFinSF\", \"BsmtFinSFTwo\", \"OverallCond\", \"MoSold\", \"SecondFlrSF\", \"TotRmsAbvGrd\", \"ScreenPorch\", \"Fireplaces\", \"OverallQual\", \"HalfBath\", \"MasVnrArea\", \"GarageCars\", \"LotFrontage\", \"BsmtFullBath\", \"FullBath\", \"BedroomAbvGr\", \"BsmtHalfBath\"];\nconst tableColumns = [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features];\nconst tableRows = new Array(tableColumns.length).fill(1).map(() => {\n  const row = {};\n  tableColumns.forEach(tableColumn => row[tableColumn] = Math.random() * 1000 - 500);\n  return row;\n});\nconst lineSeriesData = [];\n\nfor (let i = 0; i < 30; ++i) {\n  lineSeriesData.push({\n    x: i / 10,\n    y: (i > 0 ? lineSeriesData[i - 1].y : 0) + Math.random() * (2 ^ i)\n  });\n}\n\nfunction App() {\n  _s();\n\n  const [selectedRowIndex, setSelectedRowIndex] = useState();\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"mosaic\",\n      children: features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [feature, /*#__PURE__*/_jsxDEV(FlexibleWidthXYPlot, {\n          height: 200,\n          children: [/*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LineSeries, {\n            color: \"red\",\n            data: lineSeriesData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, `chart-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TreemapContainer, {\n      features: features,\n      selectedRowIndex: selectedRowIndex,\n      tableRows: tableRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: tableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: column\n            }, `feature-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: index === selectedRowIndex ? \"selected\" : \"\",\n            onClick: () => setSelectedRowIndex(index),\n            children: tableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row[column]\n            }, `feature-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this))\n          }, `row-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lK1hKxVtu5nIELN0suz3bUmNYvM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tomlaczik/research/src/App.js"],"names":["React","useState","FlexibleWidthXYPlot","HorizontalGridLines","LineSeries","XAxis","YAxis","TreemapContainer","features","tableColumns","tableRows","Array","length","fill","map","row","forEach","tableColumn","Math","random","lineSeriesData","i","push","x","y","App","selectedRowIndex","setSelectedRowIndex","feature","index","column"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  LineSeries,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\n\nimport \"react-vis/dist/style.css\";\n\nimport \"./App.css\";\nimport { TreemapContainer } from \"./components\";\n\nconst features = [\n  \"LotArea\",\n  \"YearBuilt\",\n  \"GrLivArea\",\n  \"KitchenAbvGr\",\n  \"FirstFlrSF\",\n  \"PoolArea\",\n  \"TotalBsmtSF\",\n  \"BsmtFinSFOne\",\n  \"BsmtUnfSF\",\n  \"GarageYrBlt\",\n  \"EnclosedPorch\",\n  \"WoodDeckSF\",\n  \"MSSubClass\",\n  \"MiscVal\",\n  \"OpenPorchSF\",\n  \"ThreeSsnPorch\",\n  \"YearRemodAdd\",\n  \"YrSold\",\n  \"GarageArea\",\n  \"LowQualFinSF\",\n  \"BsmtFinSFTwo\",\n  \"OverallCond\",\n  \"MoSold\",\n  \"SecondFlrSF\",\n  \"TotRmsAbvGrd\",\n  \"ScreenPorch\",\n  \"Fireplaces\",\n  \"OverallQual\",\n  \"HalfBath\",\n  \"MasVnrArea\",\n  \"GarageCars\",\n  \"LotFrontage\",\n  \"BsmtFullBath\",\n  \"FullBath\",\n  \"BedroomAbvGr\",\n  \"BsmtHalfBath\",\n];\n\nconst tableColumns = [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features];\n\nconst tableRows = new Array(tableColumns.length).fill(1).map(() => {\n  const row = {};\n  tableColumns.forEach(\n    (tableColumn) => (row[tableColumn] = Math.random() * 1000 - 500)\n  );\n  return row;\n});\n\nconst lineSeriesData = [];\nfor (let i = 0; i < 30; ++i) {\n  lineSeriesData.push({\n    x: i / 10,\n    y: (i > 0 ? lineSeriesData[i - 1].y : 0) + Math.random() * (2 ^ i),\n  });\n}\n\nfunction App() {\n  const [selectedRowIndex, setSelectedRowIndex] = useState();\n\n  return (\n    <main>\n      <section id=\"mosaic\">\n        {features.map((feature, index) => (\n          <div key={`chart-${index}`}>\n            {feature}\n\n            <FlexibleWidthXYPlot height={200}>\n              <HorizontalGridLines />\n              <LineSeries color=\"red\" data={lineSeriesData} />\n              <XAxis />\n              <YAxis />\n            </FlexibleWidthXYPlot>\n          </div>\n        ))}\n      </section>\n      <TreemapContainer\n        features={features}\n        selectedRowIndex={selectedRowIndex}\n        tableRows={tableRows}\n      />\n      <section>\n        <table>\n          <thead>\n            <tr>\n              {tableColumns.map((column, index) => (\n                <th key={`feature-${index}`}>{column}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tableRows.map((row, index) => (\n              <tr\n                key={`row-${index}`}\n                className={index === selectedRowIndex ? \"selected\" : \"\"}\n                onClick={() => setSelectedRowIndex(index)}\n              >\n                {tableColumns.map((column, index) => (\n                  <td key={`feature-${index}`}>{row[column]}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}