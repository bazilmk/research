{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tomlaczik/research/src/components/LocalExplanation/LocalExplanation.js\";\nimport React, { Component } from \"react\";\nimport { FlexibleXYPlot, HorizontalGridLines, Treemap, VerticalBarSeries, XAxis, YAxis } from \"react-vis\";\nimport { Tooltip } from \"..\";\nimport \"./LocalExplanation.css\";\nconst COLORS = {\n  red: \"#bf212f\",\n  green: \"#006f3c\"\n};\nexport class LocalExplanation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: {\n        width: 0,\n        height: 0\n      },\n      displayMode: \"resquarify\"\n    };\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateSize = this.updateSize.bind(this);\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n    this.getDataForWaterfall = this.getDataForWaterfall.bind(this);\n  }\n\n  render() {\n    const {\n      selectedRowIndex\n    } = this.props;\n    const {\n      data,\n      dimensions,\n      displayMode,\n      tooltipData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"treemap-container\",\n      ref: this.updateSize,\n      onMouseLeave: this.resetTooltipData,\n      children: selectedRowIndex === undefined ? \"Select a row in the table below\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [displayMode === \"waterfall\" ? /*#__PURE__*/_jsxDEV(FlexibleXYPlot, {\n          xType: \"ordinal\",\n          children: [/*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(VerticalBarSeries, {\n            data: data,\n            colorType: \"literal\",\n            onValueMouseOver: data => this.updateTooltipData({\n              title: data.x,\n              size: data.y - data.y0,\n              color: data.color\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            title: \"Feature\",\n            tickLabelAngle: 270\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            title: \"Contribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Treemap, {\n          title: \"Test\",\n          data: data,\n          mode: displayMode,\n          hideRootNode: true,\n          colorType: \"literal\",\n          onLeafMouseOver: ({\n            data\n          }) => this.updateTooltipData(data),\n          onLeafClick: (...args) => console.log(\"klikk\", [args]),\n          padding: 1,\n          margin: 0,\n          ...dimensions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          data: tooltipData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  resetTooltipData() {\n    this.setState({\n      tooltipData: undefined\n    });\n  }\n\n  updateTooltipData(data) {\n    this.setState({\n      tooltipData: data\n    });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = containerElement;\n      this.setState({\n        dimensions: {\n          width,\n          height\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      selectedRowIndex\n    } = this.props;\n\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      let data;\n\n      if (this.state.displayMode === \"waterfall\") {\n        data = this.getDataForWaterfall();\n      } else {\n        data = {\n          children: [{\n            title: \"Negative\",\n            children: this.getPositiveChildren(),\n            color: \"none\"\n          }, {\n            title: \"Positive\",\n            children: this.getNegativeChildren(),\n            color: \"none\"\n          }]\n        };\n      }\n\n      this.setState({\n        data\n      });\n    }\n  }\n\n  getDataForWaterfall() {\n    const {\n      selectedRowIndex\n    } = this.props;\n    if (selectedRowIndex === undefined) return [];\n    const children = [];\n    const selectedRow = this.props.data[selectedRowIndex];\n    this.props.features.forEach(feature => {\n      const value = selectedRow[feature];\n      const newChild = {\n        x: feature,\n        y: value,\n        color: value < 0 ? COLORS.red : COLORS.green\n      };\n      const insertIndex = children.findIndex(({\n        y\n      }) => y > value);\n\n      if (insertIndex === -1) {\n        children.push(newChild);\n      } else {\n        children.splice(insertIndex, 0, newChild);\n      }\n    });\n    return children.reduce((collector, child, index) => [...collector, index > 0 ? { ...child,\n      y: collector[index - 1].y + child.y,\n      y0: collector[index - 1].y\n    } : { ...child,\n      y0: 0\n    }], []);\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const {\n      selectedRowIndex\n    } = this.props;\n    if (selectedRowIndex === undefined) return [];\n    const children = [];\n    const selectedRow = this.props.data[selectedRowIndex];\n    const color = returnPositiveChilren ? COLORS.green : COLORS.green;\n    this.props.features.forEach(feature => {\n      const value = selectedRow[feature];\n      if (!returnPositiveChilren && value < 0 || returnPositiveChilren) children.push({\n        title: feature,\n        size: Math.abs(value),\n        color\n      });\n    });\n    return children;\n  }\n\n  componentDidMount() {\n    const searchParams = new URLSearchParams(window.location.search);\n    let displayMode;\n\n    switch (searchParams.get(\"v\")) {\n      case \"b\":\n        displayMode = \"circlePack\";\n        break;\n\n      case \"t\":\n        displayMode = \"resquarify\";\n        break;\n\n      default:\n        displayMode = \"waterfall\";\n        break;\n    }\n\n    this.setState({\n      displayMode\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/tomlaczik/research/src/components/LocalExplanation/LocalExplanation.js"],"names":["React","Component","FlexibleXYPlot","HorizontalGridLines","Treemap","VerticalBarSeries","XAxis","YAxis","Tooltip","COLORS","red","green","LocalExplanation","constructor","props","state","dimensions","width","height","displayMode","resetTooltipData","bind","updateTooltipData","updateSize","getPositiveChildren","getNegativeChildren","getChildren","getDataForWaterfall","render","selectedRowIndex","data","tooltipData","undefined","title","x","size","y","y0","color","args","console","log","setState","containerElement","clientWidth","clientHeight","componentDidUpdate","prevProps","children","selectedRow","features","forEach","feature","value","newChild","insertIndex","findIndex","push","splice","reduce","collector","child","index","returnPositiveChilren","Math","abs","componentDidMount","searchParams","URLSearchParams","window","location","search","get"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  FlexibleXYPlot,\n  HorizontalGridLines,\n  Treemap,\n  VerticalBarSeries,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\nimport { Tooltip } from \"..\";\n\nimport \"./LocalExplanation.css\";\n\nconst COLORS = {\n  red: \"#bf212f\",\n  green: \"#006f3c\",\n};\n\nexport class LocalExplanation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dimensions: { width: 0, height: 0 },\n      displayMode: \"resquarify\",\n    };\n\n    this.resetTooltipData = this.resetTooltipData.bind(this);\n    this.updateTooltipData = this.updateTooltipData.bind(this);\n    this.updateSize = this.updateSize.bind(this);\n\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n\n    this.getDataForWaterfall = this.getDataForWaterfall.bind(this);\n  }\n\n  render() {\n    const { selectedRowIndex } = this.props;\n    const { data, dimensions, displayMode, tooltipData } = this.state;\n\n    return (\n      <section\n        id=\"treemap-container\"\n        ref={this.updateSize}\n        onMouseLeave={this.resetTooltipData}\n      >\n        {selectedRowIndex === undefined ? (\n          \"Select a row in the table below\"\n        ) : (\n          <>\n            {displayMode === \"waterfall\" ? (\n              <FlexibleXYPlot xType=\"ordinal\">\n                <HorizontalGridLines />\n                <VerticalBarSeries\n                  data={data}\n                  colorType=\"literal\"\n                  onValueMouseOver={(data) =>\n                    this.updateTooltipData({\n                      title: data.x,\n                      size: data.y - data.y0,\n                      color: data.color,\n                    })\n                  }\n                />\n                <XAxis title=\"Feature\" tickLabelAngle={270} />\n                <YAxis title=\"Contribution\" />\n              </FlexibleXYPlot>\n            ) : (\n              <Treemap\n                title={\"Test\"}\n                data={data}\n                mode={displayMode}\n                hideRootNode\n                colorType=\"literal\"\n                onLeafMouseOver={({ data }) => this.updateTooltipData(data)}\n                onLeafClick={(...args) => console.log(\"klikk\", [args])}\n                padding={1}\n                margin={0}\n                {...dimensions}\n              />\n            )}\n            <Tooltip data={tooltipData} />\n          </>\n        )}\n      </section>\n    );\n  }\n\n  resetTooltipData() {\n    this.setState({ tooltipData: undefined });\n  }\n\n  updateTooltipData(data) {\n    this.setState({ tooltipData: data });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const { clientWidth: width, clientHeight: height } = containerElement;\n      this.setState({ dimensions: { width, height } });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedRowIndex } = this.props;\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      let data;\n      if (this.state.displayMode === \"waterfall\") {\n        data = this.getDataForWaterfall();\n      } else {\n        data = {\n          children: [\n            {\n              title: \"Negative\",\n              children: this.getPositiveChildren(),\n              color: \"none\",\n            },\n            {\n              title: \"Positive\",\n              children: this.getNegativeChildren(),\n              color: \"none\",\n            },\n          ],\n        };\n      }\n      this.setState({\n        data,\n      });\n    }\n  }\n\n  getDataForWaterfall() {\n    const { selectedRowIndex } = this.props;\n\n    if (selectedRowIndex === undefined) return [];\n\n    const children = [];\n\n    const selectedRow = this.props.data[selectedRowIndex];\n\n    this.props.features.forEach((feature) => {\n      const value = selectedRow[feature];\n      const newChild = {\n        x: feature,\n        y: value,\n        color: value < 0 ? COLORS.red : COLORS.green,\n      };\n\n      const insertIndex = children.findIndex(({ y }) => y > value);\n\n      if (insertIndex === -1) {\n        children.push(newChild);\n      } else {\n        children.splice(insertIndex, 0, newChild);\n      }\n    });\n\n    return children.reduce(\n      (collector, child, index) => [\n        ...collector,\n        index > 0\n          ? {\n              ...child,\n              y: collector[index - 1].y + child.y,\n              y0: collector[index - 1].y,\n            }\n          : { ...child, y0: 0 },\n      ],\n      []\n    );\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const { selectedRowIndex } = this.props;\n\n    if (selectedRowIndex === undefined) return [];\n\n    const children = [];\n\n    const selectedRow = this.props.data[selectedRowIndex];\n    const color = returnPositiveChilren ? COLORS.green : COLORS.green;\n    this.props.features.forEach((feature) => {\n      const value = selectedRow[feature];\n      if ((!returnPositiveChilren && value < 0) || returnPositiveChilren)\n        children.push({ title: feature, size: Math.abs(value), color });\n    });\n    return children;\n  }\n\n  componentDidMount() {\n    const searchParams = new URLSearchParams(window.location.search);\n\n    let displayMode;\n    switch (searchParams.get(\"v\")) {\n      case \"b\":\n        displayMode = \"circlePack\";\n        break;\n      case \"t\":\n        displayMode = \"resquarify\";\n        break;\n      default:\n        displayMode = \"waterfall\";\n        break;\n    }\n    this.setState({ displayMode });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}