{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tomlaczik/research/src/components/TreemapContainer/TreemapContainer.js\";\nimport React, { Component } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport { Tooltip } from \"..\";\nimport \"./TreemapContainer.css\";\nexport class TreemapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: {\n        width: 0,\n        height: 0\n      },\n      displayMode: \"resquarify\",\n      tooltips: []\n    };\n    this.addTooltip = this.addTooltip.bind(this);\n    this.removeTooltip = this.removeTooltip.bind(this);\n    this.updateSize = this.updateSize.bind(this);\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n    this.updateDisplayMode = this.updateDisplayMode.bind(this);\n  }\n\n  render() {\n    const {\n      selectedRowIndex\n    } = this.props;\n    const {\n      data,\n      dimensions,\n      displayMode,\n      tooltips\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"treemap-container\",\n      ref: this.updateSize,\n      onMouseLeave: this.resetTooltipData,\n      children: selectedRowIndex === undefined ? \"Select a row in the table below\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Treemap, {\n          title: \"Test\",\n          data: data,\n          mode: displayMode,\n          hideRootNode: true,\n          colorType: \"literal\",\n          onLeafMouseOver: ({\n            data\n          }) => this.addTooltip(data),\n          onLeafMouseOut: ({\n            data: {\n              title\n            }\n          }) => this.removeTooltip(title),\n          onLeafClick: (...args) => console.log(\"klikk\", [args]),\n          padding: 1,\n          margin: 0,\n          ...dimensions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), tooltips.forEach(tooltipData => /*#__PURE__*/_jsxDEV(Tooltip, {\n          data: tooltipData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Display mode\", /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: this.updateDisplayMode,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"resquarify\",\n              children: \"resquarify\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"circlePack\",\n              children: \"circlePack\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n  addTooltip(data) {\n    this.setState({\n      tooltips: [...this.state.tooltips, data]\n    });\n  }\n\n  removeTooltip(title) {\n    this.setState({\n      tooltips: this.state.tooltips.filter(tooltip => tooltip.title != title)\n    });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = containerElement;\n      this.setState({\n        dimensions: {\n          width,\n          height\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      selectedRowIndex\n    } = this.props;\n\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      this.setState({\n        data: {\n          children: [{\n            title: \"Negative\",\n            children: this.getPositiveChildren(),\n            color: \"none\"\n          }, {\n            title: \"Positive\",\n            children: this.getNegativeChildren(),\n            color: \"none\"\n          }]\n        }\n      });\n    }\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const {\n      selectedRowIndex\n    } = this.props;\n    if (selectedRowIndex === undefined) return [];\n    const children = [];\n    const selectedRow = this.props.tableRows[selectedRowIndex];\n    const color = returnPositiveChilren ? \"#006f3c\" : \"#bf212f\";\n    this.props.features.forEach(feature => {\n      const value = selectedRow[feature];\n      if (!returnPositiveChilren && value < 0 || returnPositiveChilren) children.push({\n        title: feature,\n        size: Math.abs(value),\n        color\n      });\n    });\n    return children;\n  }\n\n  updateDisplayMode({\n    target: {\n      value: displayMode\n    }\n  }) {\n    this.setState({\n      displayMode\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/tomlaczik/research/src/components/TreemapContainer/TreemapContainer.js"],"names":["React","Component","Treemap","Tooltip","TreemapContainer","constructor","props","state","dimensions","width","height","displayMode","tooltips","addTooltip","bind","removeTooltip","updateSize","getPositiveChildren","getNegativeChildren","getChildren","updateDisplayMode","render","selectedRowIndex","data","resetTooltipData","undefined","title","args","console","log","forEach","tooltipData","setState","filter","tooltip","containerElement","clientWidth","clientHeight","componentDidUpdate","prevProps","children","color","returnPositiveChilren","selectedRow","tableRows","features","feature","value","push","size","Math","abs","target"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport { Tooltip } from \"..\";\n\nimport \"./TreemapContainer.css\";\n\nexport class TreemapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dimensions: { width: 0, height: 0 },\n      displayMode: \"resquarify\",\n      tooltips: [],\n    };\n\n    this.addTooltip = this.addTooltip.bind(this);\n    this.removeTooltip = this.removeTooltip.bind(this);\n\n    this.updateSize = this.updateSize.bind(this);\n\n    this.getPositiveChildren = this.getPositiveChildren.bind(this);\n    this.getNegativeChildren = this.getNegativeChildren.bind(this);\n    this.getChildren = this.getChildren.bind(this);\n\n    this.updateDisplayMode = this.updateDisplayMode.bind(this);\n  }\n\n  render() {\n    const { selectedRowIndex } = this.props;\n    const { data, dimensions, displayMode, tooltips } = this.state;\n\n    return (\n      <section\n        id=\"treemap-container\"\n        ref={this.updateSize}\n        onMouseLeave={this.resetTooltipData}\n      >\n        {selectedRowIndex === undefined ? (\n          \"Select a row in the table below\"\n        ) : (\n          <>\n            <Treemap\n              title={\"Test\"}\n              data={data}\n              mode={displayMode}\n              hideRootNode\n              colorType=\"literal\"\n              onLeafMouseOver={({ data }) => this.addTooltip(data)}\n              onLeafMouseOut={({ data: { title } }) =>\n                this.removeTooltip(title)\n              }\n              onLeafClick={(...args) => console.log(\"klikk\", [args])}\n              padding={1}\n              margin={0}\n              {...dimensions}\n            />\n            {tooltips.forEach((tooltipData) => (\n              <Tooltip data={tooltipData} />\n            ))}\n            <label>\n              Display mode\n              <select onChange={this.updateDisplayMode}>\n                <option value=\"resquarify\">resquarify</option>\n                <option value=\"circlePack\">circlePack</option>\n              </select>\n            </label>\n          </>\n        )}\n      </section>\n    );\n  }\n\n  addTooltip(data) {\n    this.setState({ tooltips: [...this.state.tooltips, data] });\n  }\n\n  removeTooltip(title) {\n    this.setState({\n      tooltips: this.state.tooltips.filter((tooltip) => tooltip.title != title),\n    });\n  }\n\n  updateSize(containerElement) {\n    if (containerElement !== null) {\n      const { clientWidth: width, clientHeight: height } = containerElement;\n      this.setState({ dimensions: { width, height } });\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { selectedRowIndex } = this.props;\n    if (selectedRowIndex !== prevProps.selectedRowIndex) {\n      this.setState({\n        data: {\n          children: [\n            {\n              title: \"Negative\",\n              children: this.getPositiveChildren(),\n              color: \"none\",\n            },\n            {\n              title: \"Positive\",\n              children: this.getNegativeChildren(),\n              color: \"none\",\n            },\n          ],\n        },\n      });\n    }\n  }\n\n  getPositiveChildren() {\n    return this.getChildren(true);\n  }\n\n  getNegativeChildren() {\n    return this.getChildren(false);\n  }\n\n  getChildren(returnPositiveChilren) {\n    const { selectedRowIndex } = this.props;\n\n    if (selectedRowIndex === undefined) return [];\n\n    const children = [];\n\n    const selectedRow = this.props.tableRows[selectedRowIndex];\n    const color = returnPositiveChilren ? \"#006f3c\" : \"#bf212f\";\n    this.props.features.forEach((feature) => {\n      const value = selectedRow[feature];\n      if ((!returnPositiveChilren && value < 0) || returnPositiveChilren)\n        children.push({ title: feature, size: Math.abs(value), color });\n    });\n    return children;\n  }\n\n  updateDisplayMode({ target: { value: displayMode } }) {\n    this.setState({ displayMode });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}