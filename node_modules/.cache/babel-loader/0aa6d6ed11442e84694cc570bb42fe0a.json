{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tomlaczik/research/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { Treemap } from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport \"./App.css\";\nimport { Tooltip } from \"./components\";\nconst features = [\"LotArea\", \"YearBuilt\", \"GrLivArea\", \"KitchenAbvGr\", \"FirstFlrSF\", \"PoolArea\", \"TotalBsmtSF\", \"BsmtFinSFOne\", \"BsmtUnfSF\", \"GarageYrBlt\", \"EnclosedPorch\", \"WoodDeckSF\", \"MSSubClass\", \"MiscVal\", \"OpenPorchSF\", \"ThreeSsnPorch\", \"YearRemodAdd\", \"YrSold\", \"GarageArea\", \"LowQualFinSF\", \"BsmtFinSFTwo\", \"OverallCond\", \"MoSold\", \"SecondFlrSF\", \"TotRmsAbvGrd\", \"ScreenPorch\", \"Fireplaces\", \"OverallQual\", \"HalfBath\", \"MasVnrArea\", \"GarageCars\", \"LotFrontage\", \"BsmtFullBath\", \"FullBath\", \"BedroomAbvGr\", \"BsmtHalfBath\"];\nconst tableColumns = [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features];\nconst tableRows = new Array(tableColumns.length).fill(1).map(() => {\n  const row = {};\n  tableColumns.forEach(tableColumn => row[tableColumn] = Math.random() * 1000 - 500);\n  return row;\n});\n\nfunction App() {\n  _s();\n\n  const [selectedRowIndex, setSelectedRowIndex] = useState();\n  const [tooltipData, setTooltipData] = useState();\n  const treeChartData = useMemo(() => {\n    const positiveChildren = [];\n    const negativeChildren = [];\n\n    if (selectedRowIndex !== undefined) {\n      const selectedRow = tableRows[selectedRowIndex];\n      features.forEach(feature => {\n        let children, color;\n        const value = selectedRow[feature];\n\n        if (value < 0) {\n          children = negativeChildren;\n          color = \"#006f3c\";\n        } else {\n          children = positiveChildren;\n          color = \"#bf212f\";\n        }\n\n        children.push({\n          title: feature,\n          size: Math.abs(value),\n          color\n        });\n      });\n    }\n\n    return {\n      children: [{\n        title: \"Negative\",\n        children: positiveChildren,\n        color: \"none\"\n      }, {\n        title: \"Positive\",\n        children: negativeChildren,\n        color: \"none\"\n      }]\n    };\n  }, [selectedRowIndex]);\n  const [treeMapDimensions, setTreeMapDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const treeMapContainer = useCallback(treeMapContainerElement => {\n    if (treeMapContainerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = treeMapContainerElement;\n      setTreeMapDimensions({\n        width,\n        height\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"mosaic\",\n        children: features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [feature, \" \", index]\n        }, `chart-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"main\",\n        ref: treeMapContainer,\n        onMouseOut: () => console.log(\"put\"),\n        children: [selectedRowIndex === undefined && \"Select a row in the table below\", /*#__PURE__*/_jsxDEV(Treemap, {\n          title: \"Test\",\n          data: treeChartData,\n          mode: \"binary\",\n          hideRootNode: true,\n          colorType: \"literal\",\n          onLeafMouseOver: ({\n            data\n          }) => setTooltipData(data),\n          onLeafClick: (...args) => console.log(\"klikk\", [args]),\n          padding: 1,\n          margin: 0,\n          ...treeMapDimensions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: tableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: column\n              }, `feature-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: tableRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: index === selectedRowIndex ? \"selected\" : \"\",\n              onClick: () => setSelectedRowIndex(index),\n              children: tableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row[column]\n              }, `feature-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this))\n            }, `row-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      data: tooltipData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"ogyVhYGeMtCVq9KqqG/mHRNPbcw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tomlaczik/research/src/App.js"],"names":["React","useCallback","useMemo","useState","Treemap","Tooltip","features","tableColumns","tableRows","Array","length","fill","map","row","forEach","tableColumn","Math","random","App","selectedRowIndex","setSelectedRowIndex","tooltipData","setTooltipData","treeChartData","positiveChildren","negativeChildren","undefined","selectedRow","feature","children","color","value","push","title","size","abs","treeMapDimensions","setTreeMapDimensions","width","height","treeMapContainer","treeMapContainerElement","clientWidth","clientHeight","index","console","log","data","args","column"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from \"react\";\nimport { Treemap } from \"react-vis\";\n\nimport \"react-vis/dist/style.css\";\n\nimport \"./App.css\";\nimport { Tooltip } from \"./components\";\n\nconst features = [\n  \"LotArea\",\n  \"YearBuilt\",\n  \"GrLivArea\",\n  \"KitchenAbvGr\",\n  \"FirstFlrSF\",\n  \"PoolArea\",\n  \"TotalBsmtSF\",\n  \"BsmtFinSFOne\",\n  \"BsmtUnfSF\",\n  \"GarageYrBlt\",\n  \"EnclosedPorch\",\n  \"WoodDeckSF\",\n  \"MSSubClass\",\n  \"MiscVal\",\n  \"OpenPorchSF\",\n  \"ThreeSsnPorch\",\n  \"YearRemodAdd\",\n  \"YrSold\",\n  \"GarageArea\",\n  \"LowQualFinSF\",\n  \"BsmtFinSFTwo\",\n  \"OverallCond\",\n  \"MoSold\",\n  \"SecondFlrSF\",\n  \"TotRmsAbvGrd\",\n  \"ScreenPorch\",\n  \"Fireplaces\",\n  \"OverallQual\",\n  \"HalfBath\",\n  \"MasVnrArea\",\n  \"GarageCars\",\n  \"LotFrontage\",\n  \"BsmtFullBath\",\n  \"FullBath\",\n  \"BedroomAbvGr\",\n  \"BsmtHalfBath\",\n];\n\nconst tableColumns = [\"ID\", \"Actual\", \"Predicted\", \"Difference\", ...features];\n\nconst tableRows = new Array(tableColumns.length).fill(1).map(() => {\n  const row = {};\n  tableColumns.forEach(\n    (tableColumn) => (row[tableColumn] = Math.random() * 1000 - 500)\n  );\n  return row;\n});\nfunction App() {\n  const [selectedRowIndex, setSelectedRowIndex] = useState();\n\n  const [tooltipData, setTooltipData] = useState();\n\n  const treeChartData = useMemo(() => {\n    const positiveChildren = [];\n    const negativeChildren = [];\n\n    if (selectedRowIndex !== undefined) {\n      const selectedRow = tableRows[selectedRowIndex];\n      features.forEach((feature) => {\n        let children, color;\n        const value = selectedRow[feature];\n        if (value < 0) {\n          children = negativeChildren;\n          color = \"#006f3c\";\n        } else {\n          children = positiveChildren;\n          color = \"#bf212f\";\n        }\n        children.push({ title: feature, size: Math.abs(value), color });\n      });\n    }\n\n    return {\n      children: [\n        {\n          title: \"Negative\",\n          children: positiveChildren,\n          color: \"none\",\n        },\n        {\n          title: \"Positive\",\n          children: negativeChildren,\n          color: \"none\",\n        },\n      ],\n    };\n  }, [selectedRowIndex]);\n\n  const [treeMapDimensions, setTreeMapDimensions] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  const treeMapContainer = useCallback((treeMapContainerElement) => {\n    if (treeMapContainerElement !== null) {\n      const {\n        clientWidth: width,\n        clientHeight: height,\n      } = treeMapContainerElement;\n      setTreeMapDimensions({ width, height });\n    }\n  }, []);\n\n  return (\n    <>\n      <main>\n        <section id=\"mosaic\">\n          {features.map((feature, index) => (\n            <div key={`chart-${index}`}>\n              {feature} {index}\n            </div>\n          ))}\n        </section>\n        <section\n          id=\"main\"\n          ref={treeMapContainer}\n          onMouseOut={() => console.log(\"put\")}\n        >\n          {selectedRowIndex === undefined && \"Select a row in the table below\"}\n          <Treemap\n            title={\"Test\"}\n            data={treeChartData}\n            mode=\"binary\"\n            hideRootNode\n            colorType=\"literal\"\n            onLeafMouseOver={({ data }) => setTooltipData(data)}\n            onLeafClick={(...args) => console.log(\"klikk\", [args])}\n            padding={1}\n            margin={0}\n            {...treeMapDimensions}\n          >\n            {/*<Hint value={13}>\n            <div style={{ background: \"black\" }}>\n              <h3>Value of hint</h3>\n        </div>\n          </Hint>*/}\n          </Treemap>\n        </section>\n        <section>\n          <table>\n            <thead>\n              <tr>\n                {tableColumns.map((column, index) => (\n                  <th key={`feature-${index}`}>{column}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {tableRows.map((row, index) => (\n                <tr\n                  key={`row-${index}`}\n                  className={index === selectedRowIndex ? \"selected\" : \"\"}\n                  onClick={() => setSelectedRowIndex(index)}\n                >\n                  {tableColumns.map((column, index) => (\n                    <td key={`feature-${index}`}>{row[column]}</td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </section>\n      </main>\n      <Tooltip data={tooltipData} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}